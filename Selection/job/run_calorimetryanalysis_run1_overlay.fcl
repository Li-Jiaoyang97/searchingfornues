#include "eventweight_microboone.fcl"
#include "seedservice_microboone.fcl"
#include "microboone_eventweight_service.fcl"

#include "run_calorimetryanalysis_run1_data.fcl"

physics.filters.nuselection.IsData: false

#Genie spline weights
services.UBEventWeight: @local::microboone_eventweight_service
services.NuRandomService: @local::microboone_seedservice #might not be necessary
EventWeightTreeTool: {
    tool_type: "EventWeightTree"
    createDedicatedTree: false
    createMapBranch: false # true if std::map<string,std::vector<float>> should be saved
    createFluxBranch: false
    createGenieBranch: false
    createReintBranch: false
    createSplineBranch: true
}


#Systematic weights
physics.filters.nuselection.AnalysisTools.eventweighttree:    @local::EventWeightTreeTool
physics.producers.eventweight:        @local::microboone_eventweight
#physics.p1: [ eventweight, @sequence::physics.p1] #Uncomment line to run systematic weights, or comment line to not run them

#Genie spline weights
physics.producers.eventweightSplines: @local::microboone_eventweight_justSplines
physics.p1: [ eventweightSplines, @sequence::physics.p1]
microboone_eventweight_justSplines.weight_functions: [ splines_general ]
